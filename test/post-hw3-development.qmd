---
author: "Anna Ramji (she/her)"
date: 2024-02-24
title: "Post-Homework 3 Plot Development"
format:
  html:
    embed-resources: true
    toc: true
    code-fold: true
---

```{r setup-1}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r setup-2}
library("knitr")
library("tidyverse") # for tidy everything! (data cleaning, wrangling)
library("here") # for reproducible file paths
library("showtext") 

# import fonts
font_add_google(name = "Playfair Display", family = "playfair")
font_add_google(name = "Raleway", family = "raleway")

#................enable {showtext} for rendering.................
showtext_auto()
```



## Data Wrangling

```{r setup}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                load packages                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# read-in earlier
#library("tidyverse") # for tidy everything! (data cleaning, wrangling)
#library("here") # for reproducible file paths

library("janitor") # used to clean column names

library("patchwork") # to stitch plots together 

library("glue") # for scientific labeling on plots 

library("scales") # provides the internal scaling infrastructure used by ggplot2, and gives you tools to override the default breaks, labels, transformations and palettes (installed automatically with {ggplot2} or {tidyverse})
library("paletteer") # for custom palettes
library("ggtext") # used for customizing plot text
# library("ggrepel") # to label lines in plot

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                import data                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

agrifood_emissions <- read_csv(here("data", "Agrofood_co2_emission.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          data cleaning & wrangling                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# the column names are not tidy, so I'll start out by renaming them to lower_snake_case()
ag_clean_names <- agrifood_emissions |> 
  janitor::clean_names() # the column names are not tidy, so I'll start out by renaming them to lower_snake_case()

# tidy data
ag_clean <- ag_clean_names |> 
  # the column names are quite long, though informative, so I'll rename a few of them to more easily referable titles 
  rename(country = area, 
         avg_temp_c = average_temperature_c,
         total_emissions = total_emission, # plurals are always so tricky to keep track of, but "emissions" feels more natural than "emission"
         urban_pop = urban_population,
         rural_pop = rural_population,
         agfood_waste_disposal = agrifood_systems_waste_disposal) |> 
  # adding a total population column
  mutate(total_pop = (total_population_male + total_population_female)) |> 
  # making a proportion column to theoretically compare/standardize emissions per capita
  mutate(emissions_per_capita = (total_emissions / total_pop))

# -------------- Renaming country names ------------------------------------
rename_function <- function(df, column, old_name, new_name) {
  # using the specified dataframe
  df |> 
    # mutate across the specified column
    mutate(across(column,
                  str_replace, # use the str_replace function
                  pattern = old_name, # find the string pattern old_name
                  replacement = new_name)) # replace with new_name
}


# renaming agri-food emissions countries ----

ag_renamed <- ag_clean |> 
  rename_function("country", "China, Hong Kong SAR", "Hong Kong") |> 
  rename_function("country", "China, Taiwan Province of", "Taiwan") |> 
  rename_function("country", "China, mainland", "China (mainland)") |> 
  rename_function("country", "United States of America", "USA") |> 
  rename_function("country", "Venezuela (Bolivarian Republic of)", "Venezuela") |> 
  rename_function("country", "Bolivia (Plurinational State of)", "Bolivia") |> # for some reason, this renaming line doesn't seem to work...
  rename_function("country", "United Kingdom of Great Britain and Northern Ireland", "United Kingdom") |> 
  rename_function("country", "Democratic Republic of the Congo", "DRC")


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          creating subsets                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ----------------- Subsets from HW2 plots -----------------------------------
top_emitters <- ag_renamed |> 
#  group_by(year, country) |> 
#  arrange(desc(total_emissions)) |> 
  filter(country %in% c("China (mainland)", "Indonesia", "Brazil", "USA", "India")) |> 
  mutate(label = if_else(year == max(year),
                         as.character(country), NA_character_)) # to label plot 
 


# top emitters per capita
top_per_cap <- ag_renamed |> 
  group_by(year, country) |> 
  arrange(desc(emissions_per_capita)) |> 
  filter(country %in% c("Belize", "Botswana", "Guyana", "Suriname", "Trinidad and Tobago"))

usa_food <- ag_renamed |> 
  filter(country %in% c("USA"))


emissions_2020 <- ag_renamed |> 
  filter(year %in% c("2020"))


top_emitters_2020 <- top_emitters |> 
  filter(year %in% c("2020"))


# United States of America Subset ----
usa <- ag_renamed |> 
  filter(country %in% c("USA"))

# China Subset ----

china <- ag_renamed |> 
  filter(country %in% c("China (mainland)"))

# US & China Subset ----

usa_china <- ag_renamed |> 
  filter(country %in% c("China (mainland)", "USA"))


# USA 2020 (for Sankey diagram)

usa_2020 <- usa |> 
  filter(year %in% c(2020))

# China 2020 (for Sankey diagram)

china_2020 <- china |> 
  filter(year %in% c(2020))


# USA & China in 1990, 2020

usa_china_90_20 <- usa_china |> 
  filter(year %in% c(1990, 2020))

# Average emissions across entire dataset

all_avg_emissions <- ag_clean |> 
  group_by(year) |> 
  summarize(avg_tot_emissions = mean(total_emissions,
                                     na.rm = TRUE),
            avg_per_cap_emissions = mean(emissions_per_capita,
                                         na.rm = TRUE)) |> 
  mutate(country = "Global Average")


# percentage emissions function ----

pct_emissions <- function(df, value, total, new_column) {
  
  df |> 
    mutate(new_column = (value / total) * 100)
  
}

# usa_china_pct <- usa_china |> 
#   pct_emissions(value = )

```

## Plot 1: Agri-food CO2 Emissions Comparison

```{r plot-1, fig.width=8, fig.height=9}
# I'm struggling to get this to work 
title_lab_p1 <- glue::glue("Total Agri-food CO<sub>2</sub> Emissions in USA and China (1990-2020)")
y_ax_label_total <- glue::glue("Agri-food CO<sub>2</sub> emissions (Million kt)*")
y_ax_label_per_cap <- glue::glue("Agri-food CO<sub>2</sub> emissions (kt)*")

# setting colors.... I used a colorpicker on the country flags to get these values
cols <- c("China (mainland)" = "#E7001D", "USA" = "#011951")


usa_china_tot_emissions_plot <- ggplot() +
  # geom_point() +
  geom_line(data = usa_china,
            aes(x = year,
                y = total_emissions,
                color = country,
                linetype = country)) +
  # removed global average line following advice I got in discussion
  # geom_line(data = all_avg_emissions,
  #           aes(x = year,
  #               y = avg_emissions,
  #               color = country,
  #               linetype = country),
  #      linetype = "longdash",
  #           linewidth = 0.5) +
  
  # rescaling y-axis to be more legible (than 2e+06, for example)
  scale_y_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.000001, # millions
                                          suffix = "M")) +
  scale_color_manual(values = cols) +
  
  # ---------- updating labels, fit for patchwork ------------
labs(
  x = "", # removed for patchwork
  y = y_ax_label_total,
  # removed for patchwork
#  title = "Agri-food CO2 emissions in USA and China (1990-2020)",
# title = title_lab_p1,
  subtitle = "Total Emissions", # for patchwork
  #       caption = "*1 kiloton (kt) = 1000 kg",
  color = "Country",
  linetype = "Country") +
  
  theme_bw() +
  
  # ================== Theme ===================================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
 #  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
  # legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "playfair", size = 10),
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  # commented out for patchwork
  # plot.title = ggtext::element_markdown(hjust = 0.45,
  #                           vjust = 1,
  #                           family = "Futura",
  #                           face = "bold",
  #                           size = 18
              # it took a LOT of trial and error to get all of these margins set
              # for each text element (title, substitle, caption, etc. for each plot)
                            # margin = margin(t = 1, r = 2, 
                            #                 b = 1.2, l = 2,
                            #                 unit = "lines")
              
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "playfair",
                               face = "bold", 
                               size = 16,
                               # adjusting positioning of text
                               vjust = 1,
                               hjust = 0.5,
                               margin = margin(t = 0.2, r = 0, 
                                               b = 1, l = 0,
                                               unit = "lines")),
  
  # --------------- legend ----------------------
  legend.title = element_text(family = "playfair",
                              face = "bold",
                              size = 11),
  #  legend.title.align = 0.5,
  legend.text = element_text(family = "raleway",
                             size = 11),
  legend.position = c(0.18, 0.80),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "playfair",
                              face = "bold",
                              size = 12),
  axis.text.x = element_text(
    hjust = 0.9,
  #  vjust = 0.9,
    family = "raleway"),
  
  # --------------- y-axis ----------------------
  axis.title.y = element_markdown(family = "playfair",
                              vjust = 2,
                              face = "bold",
                              size = 12,
                              # customize axis title margins/spacing
                              margin = margin(t = 0, r = 1, 
                                              b = 0, l = 2,
                                              unit = "lines")),
  axis.text.y = element_text(family = "raleway"))

# ------------- caption -----------------------
# omitted for patchwork fit 
#   plot.caption.position = "plot",
#   plot.caption = element_text(family = "Futura",
#                               hjust = 0.9,
#                               size = 10,
#                               margin = margin(t = 3, b = 0.5,
#                                               l = 0, r = 0.2,
#                                               unit = "lines"))
# )


# usa_china_tot_emissions_plot


# ================ PER CAPITA PLOT =====================================

usa_china_per_cap_plot <- ggplot() +
  geom_line(data = usa_china,
            aes(x = year,
                y = emissions_per_capita,
                color = country,
                linetype = country)) +
  
  # removed because it skews the y-scale too much 
  # adding global average line
  #   geom_line(data = all_avg_emissions,
  #             aes(x = year,
  #                 y = avg_per_cap_emissions,
  #                 color = country,
  #                 linetype = country),
  # #            linetype = "longdash",
  #             linewidth = 0.5) +
  

scale_color_manual(values = cols) +
  
  # ------ updating labels, fit for patchwork ----------
  labs(x = "Year", 
       y = y_ax_label_per_cap, # remove label for patchwork
       # customized for patchwork
       #       title = "Agri-food CO2 emissions Per Capita",
       #       subtitle = "in the USA and China (1990-2020)",
       subtitle = "Emissions Per Capita",
     #  caption = "*1 kiloton (kt) = 1000 kg \n \n Global Average Emissions Per Capita = 0.2 kt",
       color = "", # remove label for patchwork
       linetype = "" # remove label for patchwork
       ) +
  guides(legend = "none") +
  
  theme_bw() +
  
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
 # legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "raleway", size = 10),
  
  # ---------------- title ---------------------
 # omitted for patchwork
  plot.title.position = "plot",
  # plot.title = element_text(hjust = 0.45,
  #                           vjust = 1,
  #                           family = "Futura",
  #                           face = "bold",
  #                           size = 18),
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "playfair",
                               face = "bold", 
                               size = 16,
                               vjust = 1,
                               hjust = 0.5,
                               margin = margin(t = 0.2, r = 0, 
                                               b = 1, l = 0,
                                               unit = "lines")),
  
  # --------------- legend ----------------------
  # removed for patchwork 
 legend.position = "none", 
#   legend.title = element_text(family = "Futura",
#                               face = "bold",
#                               size = 11),
# #  legend.title.align = 0.5,
#   legend.text = element_text(family = "Futura",
#                              size = 11),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "playfair",
                              face = "bold",
                              size = 12),
  axis.text.x = element_text(
                            # hjust = 0.9,
                             vjust = 0.9,
                             family = "raleway"),
  
  # --------------- y-axis ----------------------
# remove for patchwork
 axis.title.y = element_markdown(
                            family = "playfair",
                            vjust = 2,
                            face = "bold",
                            size = 12,
                            # customize title margins
                            margin = margin(t = 0, r = 1,
                                          b = 0, l = 2,
                                          unit = "lines")),
   axis.text.y = element_text(family = "raleway"),
  
  # ------------- caption -----------------------
# removed for patchwork
  # plot.caption.position = "plot",
  # plot.caption = element_text(family = "Futura",
  #                             hjust = 1,
  #                             size = 10,
  #                             margin = margin(t = 3, b = 0.5,
  #                                             l = 0, r = 0,
  #                                             unit = "lines"))
)
# usa_china_per_cap_plot
```


```{r plot-1-display, fig.width=8, fig.height=9}
plot1 <- usa_china_tot_emissions_plot / usa_china_per_cap_plot
plot1
plot1 + plot_annotation(
  title = glue::glue("How Have Agri-food CO<sub>2</sub> Emissions Changed Over Time?"),
  subtitle = "from 1990–2020",
  caption = "*1 kiloton (kt) = 1000 kg \n \n Global Average Emissions Per Capita = 0.2 kt",
  theme = theme(
    plot.title = ggtext::element_markdown(hjust = 0.5,
                                          vjust = 1,
                                          family = "playfair",
                                          face = "bold",
                                          size = 18,
                                          margin = margin(t = 1, unit = "lines")),
    plot.subtitle = element_text(family = "raleway",
                                 face = "plain", 
                                 size = 15,
                                 vjust = 1,
                                 hjust = 0.5,
                                 margin = margin(t = 0.2, r = 0,
                                                 b = 1, l = 0,
                                                 unit = "lines")),
    plot.caption = element_text(family = "raleway",
                              hjust = 1,
                              size = 10,
                              margin = margin(t = 3, b = 0.5,
                                              l = 0, r = 0,
                                              unit = "lines"))
    ) # END THEME
  ) # END PLOT ANNOTATION

# wrap_elements(grid::textGrob(y_ax_label_1,
#                              rot = 90,vjust = 0.5)) + plot1


```

I don't know why the second line of my plot caption is slightly indented closer to the center, and I have tried and failed to fix it. Any suggestions or tips are very welcome!

## Plot 2: Dumbbell plot

of emissions by source in US, China (faceted)

### Plot 2 prep

```{r plot-2-prep}
# making subsets of relevant columns, years, total population, emissions per capita

usa_china_subset <- usa_china_90_20 |> 
  # manually deselecting lower emissions columns
  select(-c(forestland, fires_in_organic_soils,
            fires_in_humid_tropical_forests,
            savanna_fires, forest_fires,
            drained_organic_soils_co2, 
            pesticides_manufacturing,
            manure_applied_to_soils,
            crop_residues
            )) |> 
  # pivot all columns other than this specified list 
  pivot_longer(cols = -c(country, year, rural_pop,
                         urban_pop, total_population_male,
                         total_population_female, total_pop,
                         avg_temp_c, emissions_per_capita,
                         total_emissions, ippu),
               names_to = "emission_source", # new column name for types
               values_to = "emissions_kt") |>  # new column name for values
  # relocate for easier quick-reading 
  relocate(c(emission_source, emissions_kt), .after = year) |> 
  # make 'year' a factor (I end up making it a date for plot 3)
#  mutate(year = as.factor(year)) |> 
  group_by(country, year)

plot2_v1 <- ggplot(data = usa_china_subset,
       aes(x = fct_reorder(emission_source, emissions_kt),
           y = emissions_kt,
           fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~country, ncol = 1) +
  theme_bw()

dumb_90 <- usa_china_subset |> 
  filter(year %in% c("1990")) |> 
  ungroup() |> 
  select(-year) |> 
  mutate(emissions_1990 = emissions_kt) |> 
  select(-emissions_kt)

dumb_20 <- usa_china_subset |> 
  filter(year %in% c("2020")) |> 
  ungroup() |> 
  select(-year) |> 
  mutate(emissions_2020 = emissions_kt) |> 
  select(-emissions_kt)


# dumbbell, not dumb!
# this didn't work... kept getting improperly joined/improperly pivoted columns, such that all rows where 1990 emissions ahd values, 2020 emissions had NA values
# dumb_data <- full_join(dumb_90, dumb_20
#                    #    , .name_repair = "check_unique"
#                        )

# I'm actually going to need to figure out a better way to join the data, because this next step causes the dataframe to get incredibly messy, has duplicates, and some colunms that are duplicated actually have different values, so I'll need to seriously dig in to how I can fix this....
dumb_2 <- bind_cols(dumb_90, dumb_20) 

# renaming and relocating some columns in the meantime for this assignment
dumb_3 <- dumb_2 |> 
#  rename_all(.funs = funs(sub("\\...*", "", names(dumb2))))
#  rename_with(~str_replace(., "...*", ""))
  rename(emission_source = emission_source...2,
         country = country...1,
         total_pop = total_pop...10) |> 
  relocate(c(emissions_1990, emissions_2020), .after = emission_source)

# I tried another way of joining the data here, but ultimately couldn't get it to work and was hard-coding what pivot-wider is already supposed to do 

# create year subsets to plot
usa_china_dumb <- usa_china_subset |>
  select(country, emission_source, year, emissions_kt) |> 
#  mutate(country )
  ungroup() |>
  #group_by(emission_source) |>
  group_by(country) |>
  pivot_wider(names_from = year,
              values_from = emissions_kt,
              names_prefix = "emissions_") |>
  relocate(c(emissions_1990, emissions_2020), .after = emission_source)
# |>
# mutate(emissions_kt = case_when(
#   # keep 1990 values if 2020 is NA
#   is.na(emissions_2020) ~ emissions_1990,
#   # else if 1990 values are na, keep 2020 values
#   is.na(emissions_1990) ~ emissions_2020
# )
# ) |>
# relocate(emissions_kt, .after = emissions_2020)
head(usa_china_dumb)
```

### Plot 2: Dumbbell Plot

```{r plot-2, fig.height=7, fig.width=8}
lollipop_x_lab <-  glue::glue("Agri-food CO<sub>2</sub> emissions (kt)")

# cols <- c("1990" = "#1a4301", "2020" = "#538d22")
dumbbell_plot <- ggplot(data = dumb_3) +
  # drawing a line between the two emissions levels for each of these groups
  geom_segment(aes(x = emissions_1990, 
                   xend = emissions_2020,
                   # reorder by the top emissions categories in 2020
                   y = fct_reorder(emission_source, emissions_2020),
                   yend = emission_source),
               size = 0.5, 
               alpha = 0.5) +
  geom_point(aes(x = emissions_1990,
                 y = emission_source),
             color = "#245501",
             size = 2,
             alpha = 0.9) +
  geom_point(aes(x = emissions_2020,
                 y = emission_source),
             color = c("#73a942"),
             size = 2,
             alpha = 0.9) +
  # rescaling x-axis to be more legible (than 2e+05, for example)
  scale_x_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.001, # thousands
                                          suffix = "k")) +
  
  # updating emissions source labels
  scale_y_discrete(labels=c("food_household_consumption" = "Food Household Consumption",
                            "food_processing" = "Food Processing",
                            "agfood_waste_disposal" = "Agrifood-system Waste Disposal",
                            "food_retail" = "Food Retail",
                            "food_packaging" = "Food Packaging",
                            "fertilizers_manufacturing" = "Fertilizers Manufacturing",
                            "on_farm_energy_use" = "On-Farm Energy Use",
                            "rice_cultivation" = "Rice Cultivation",
                            # I might take this one out because it seems redundant
                            "on_farm_electricity_use" = "On-Farm Electricity Use",
                            "manure_management" = "Manure Management",
                            "food_transport" = "Food Transport",
                            "manure_left_on_pasture" = "Manure Left On Pasture",
                            # these values are wrong because of how I joined the data :(
                            # so I'll need to sort that out this week
                            "net_forest_conversion" = "Net Forest Conversion"
                            )
                   ) +
  

  facet_wrap(~country,
             nrow = 2, # stack these vertically
             scales = "free_y") + # release these from groupings that aren't a part of these facet groups
  theme_bw() +
  labs(
  #  title = "Agri-food CO2 Emissions Over Time in USA vs. China",
    # customizing colors in text (added element_markdown() in subtitle theme argument)
  #  subtitle = "Top Emissions Sources in <span style='color:#245501;'>**1990**</span> vs. <span style='color:#73a942;'>**2020**</span>",
    # changing title for infographic
    title = "Top Agri-food Emissions Sources in <span style='color:#245501;'>**1990**</span> vs. <span style='color:#73a942;'>**2020**</span>",
    y = "",
    # not sure if I need to say agri-food here again?
    x = lollipop_x_lab # ,
    # removed for infographic
   # caption = "*1 kiloton (kt) = 1000 kg"
    #   color = "Year"
  ) +
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.y = element_blank(),
  
  # increasing spacing between plots
  panel.spacing.y = unit(0.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_blank(),
  
  # adjusting legend position to sit within the plot 
  legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "playfair", size = 12, face = "bold", hjust = 0.1),
 # strip.text.x = element(text)
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  plot.title = element_markdown(hjust = 0.5,
                            vjust = 1,
                            family = "playfair",
                            face = "bold",
                            size = 18,
                            margin = margin(t = 0.3, r = 0, 
                                            b = 1.8, l = 0,
                                            unit = "lines")),
  
  # --------------- subtitle -------------------
  
  # plot.subtitle = element_text(family = "Futura",
  #                              face = "italic", 
  #                              size = 15,
  #                              vjust = 1,
  #                              hjust = 0.45),
  
  # plot.subtitle = ggtext::element_markdown(family = "raleway",
  #                                          face = "plain", 
  #                                          size = 15,
  #                                          vjust = 1,
  #                                          hjust = 0.5,
  #                                          margin = margin(t = 0.2, r = 0, 
  #                                                          b = 1.1, l = 0,
  #                                                          unit = "lines")),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_markdown(vjust = -1,
                              hjust = 0.5,
                              family = "playfair",
                              face = "plain",
                              size = 12,
                              margin = margin(t = 0.7, r = 0, 
                                              b = 1, l = 0,
                                              unit = "lines")),
  axis.text.x = element_text(vjust = 0.9,
                             family = "raleway"),
  
  # --------------- y-axis ----------------------
  axis.title.y = element_text(family = "playfair",
                              #    vjust = 2,
                              face = "bold",
                              size = 12),
  axis.text.y = element_text(family = "raleway"),
  axis.ticks.y = element_blank(),
  
  # ------------- caption -----------------------
 # removed for infographic (repetitive/redundant)
  # plot.caption = element_text(family = "raleway",
  #                             hjust = 1,
  #                             size = 10,
  #                             margin = margin(t = 2, b = 0.8,
  #                                             l = 0, r = 0.5,
  #                                             unit = "lines")),
  
  panel.border = element_blank()
  
  
)


dumbbell_plot

```

I used Coolors to pick these shades of green. I thought it made sense to have the older time set as a darker green, and the newer time as a lighter green, like how you can see new, light-green growth at the tips of evergreen trees while the rest of the branch's needles are a deeper, darker green. I'm not confident about how all of these colors will play together in the final infographic, though...

I unfortunately haven't figured out how to change these labels on the y-axis in a better way than just hard-coding it/writing each one out manually, but I'm going to try to work that out over the weekend (Sunday). I figured out how to change the names of the facet-wrap labels in my next plot using `labeller()`, but that function is used within the `facet_wrap()` call, which is different from this situation, and also required manually entering all of the old_name = new_name style of labels.

## Plot 3: Food emissions vs. Rural Pop time series

```{r plot-3-prep}
# bar plot of top 5 emissions categories for each country?

top_sources <- dumb_3 |> 
  ungroup() |> 
  group_by(country, emission_source) |> 
  arrange(desc(emissions_2020))

#top_sources
# Warning messages:
# 1: In get(name, envir = env) : internal error -3 in R_decompress1



# --------- Food emissions subset ---------------------------
# usa + china data (full 1990-2020 year range)
usa_china_pivot <- usa_china |> 
  # pivot all columns other than this specified list
  pivot_longer(cols = -c(country, year, rural_pop, urban_pop,
                         total_population_male, total_population_female,
                         total_pop, avg_temp_c, emissions_per_capita,
                         total_emissions),
               names_to = "emission_source", # new column name for types
               values_to = "emissions_kt") |> # new column name for values
  # relocate for easier quick-viz
  relocate(c(emission_source, emissions_kt), .after = year) |> 
  # making year a factor
  mutate(year = as.factor(year))


# food-emission sources only!
food_emissions <- usa_china_pivot |> 
  # selecting food-related emissions sources
  filter(emission_source %in% c("food_household_consumption",
                                "food_packaging",
                                "food_processing",
                                "food_retail",
                                "food_transport")) |> 
  # making year a Date
  mutate(year = lubridate::ymd(year, truncated = 2L))

```

```{r plot-3, fig.width=8, fig.height=5.5}

# creating labels for faceted plots
source_labs <- c("Food Household Consumption",
                 "Food Packaging",
                 "Food Processing",
                 "Food Retail",
                 "Food Transport")
# indicating which pre-existing name each of the new names match up with 
names(source_labs) <- c("food_household_consumption",
                 "food_packaging",
                 "food_processing",
                 "food_retail",
                 "food_transport")
# setting colors
cols <- c("China (mainland)" = "#fb3640", "USA" = "#0a2463")


food_title <- glue::glue("Annual Food Sector CO<sub>2</sub> Emissions Over Time")
y_ax_label <- glue::glue("CO<sub>2</sub> emissions (kt)*")


# --------- Plotting food emissions trends over time ----------

food_plot <- ggplot(data = food_emissions,
                    aes(x = year,
                        y = emissions_kt)) +
  geom_point(aes(color = country),
             alpha = 0.9) +
  # rescaling y-axis to be more legible (than 2e+06, for example)
  scale_y_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.001, # thousands
                                          suffix = "k")) +
  scale_color_manual(values = cols) +
  # adding trend line 
  geom_smooth(method = "lm",
              formula = y ~ x,
              aes(color = country),
              show.legend = FALSE,
              se = FALSE,
              lwd = 0.7,
              alpha = 0.3) +
  
  # facet wrapping by source type
  facet_wrap(~emission_source,
             nrow = 2,
             labeller = labeller(emission_source = source_labs)) +
  
  # -------- setting labels ----------------------------------
labs(
  title = food_title,
  subtitle = "in China (mainland) vs. United States of America (USA) from 1990-2020",
  color = "Country",
  x = "Year",
  y = y_ax_label,
  caption = "*1 kiloton (kt) = 1000 kg"
) +
  
  # setting base theme
  theme_bw() +
  
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
  legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "playfair", size = 10),
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  plot.title = ggtext::element_markdown(hjust = 0.45,
                            vjust = 1,
                            family = "playfair",
                            face = "bold",
                            size = 18,
             # it took a lot of trial and error to get all of these margins set
                            margin = margin(t = 0.3, r = 0, 
                                            b = 0.2, l = 0,
                                            unit = "lines")),
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "raleway",
                               face = "plain", 
                               size = 14,
                               vjust = 1,
                               hjust = 0.45,
                               margin = margin(t = 0.5, r = 0, 
                                                           b = 2, l = 0,
                                                           unit = "lines")),
  
  # --------------- legend ----------------------
  legend.title = element_text(family = "playfair",
                              face = "bold",
                              size = 11),
  legend.title.align = 0.5,
  legend.text = element_text(family = "raleway",
                             size = 11),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "playfair",
                              face = "bold",
                              size = 12,
                              margin = margin(t = 0.8, b = 0.8, unit = "lines")),
  axis.text.x = element_text(angle = 40,
                             hjust = 0.9,
                             vjust = 0.9,
                             family = "raleway"),
  
  # --------------- y-axis ----------------------
  axis.title.y = ggtext::element_markdown(family = "playfair",
                              vjust = 2,
                              face = "bold",
                              size = 12,
                              margin = margin(r = 0.8, unit = "lines")),
  axis.text.y = element_text(family = "raleway"),
  
  # ------------- caption -----------------------
  plot.caption = element_text(family = "raleway",
                              hjust = 1,
                              size = 10)
  
)

# view plot 

food_plot

```


Discussion notes:


- how to fit on an infographic?

- could have all in one row, keep it at the bottom 
- add outlines of US and China country, flags
- ?




```{r world-plot}
my_pal <- c("B" = "#E7001D", "A" = "#011951")

map_table <- tibble(country = c("USA", "China"),
                    value = c("A", "B"))

world <- map_data("world")

world |> 
  merge(map_table, by.x = "region", by.y = "country", all.x = T) %>%
  arrange(group, order) |> 
  ggplot(aes(x = long, y = lat, group = group, fill = value)) + 
  geom_polygon(color = "white", size = 0.2) +
  scale_fill_manual(values = my_pal, na.value = "gray90") +
  scale_y_continuous(limits=c(-60,90)) + 
#  coord_fixed() + 
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        legend.position = "none") 
```

