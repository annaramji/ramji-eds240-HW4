---
author: "Anna Ramji (she/her)"
date: 2024-01-31
title: "Homework 2 Part 2"
format:
  html:
    embed-resources: true
---

For HW #3, you must complete the following:

**Which option do you plan to pursue?** - I plan to pursue option 2 (infographic with 3 subquestions)

**Restate your question(s). Has this changed at all since HW #1? If yes, how so?**

Overarching Q: How have agrifood CO2 emissions changed over time in China and the United States (bigger picture trend)

1.  How have total agrifood CO2 emissions changed over time in China vs. US

2.  How have agrifood CO2 emissions per capita changed over time in China vs. US

3.  What are the key contributors to US agrifood CO2 emissions (sankey diagram) in 2020 (vs 1990 ? would that count as an additional visualization?)

Yes, I have decided to drop the economic freedom quartile dataset due to time and assignment constraints. I think if I were able to make 10 visualizations or have another quarter to work with the data, it would be intersting to investigate the relationship between economic freedom quartile and prevalence of specific contributors to agrifood CO2 emissions, but I unfortunately don't have the luxury of time and lots of visualization space on my side. For this reason, I am also no longer planning on incorporating average temperature (ºC) in my visualization. Ideally, I'd be able to look at how changing Econ Freedom Q + change in temp over time impacts specific contributors of emissions (savannah fires, for example) particularly in countries that went from lower to higher quartiles, or look at the biggest contributors to agrifood CO2 emissions by Econ Quartile. This last part could still be interesting and somewhat feasible, but might complicate my visualizations, so it could become a spring break project.

**Explain which variables from your data set(s) you will use to answer your question(s).** After wrangling my agrifood CO2 emissions data and creating new columns and calculating mean values for certain variables, I will be able to use: - time (year) - country (selecting US and China (mainland) after renaming appropriately) - total population (male pop + female pop, used to look at emissions per capita)

## HW 2 visualizations to draw from

In HW #2, you should have created some exploratory data viz to better understand your data. You may already have some ideas of how you plan to formally visualize your data, but it’s incredibly helpful to look at visualizations by other creators for inspiration. Find at least two data visualizations that you could (potentially) borrow / adapt pieces from. Link to them or download and embed them into your .qmd file, and explain which elements you might borrow (e.g. the graphic form, legend design, layout, etc.).


https://www.data-to-viz.com/graph/sankey.html Sankey Diagram 









## Hand-drawn visualizations

Hand-draw your anticipated three visualizations (option 1) or infographic (option 2). Take a photo of your drawing and embed it in your rendered .qmd file – note that these are not exploratory visualizations, but rather your plan for your final visualizations that you will eventually polish and submit with HW #4.

```{r}
library("tidyverse") # for tidy everything! (data cleaning, wrangling)
library("here") # for reproducible file paths
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Alt text here"
knitr::include_graphics("path/to/image")
```

-   Mock up your visualizations using code. We understand that you will continue to iterate on these into HW #4 (particularly after receiving feedback), but by the end of HW #3, you should:

    -   have your data plotted (if you’re experimenting with an advanced graphic form(s) that were not explicitly covered in class, we understand that this may take some more time to build; you should have as much put together as possible)

    -   use appropriate strategies to highlight / focus attention on a clear message

    -   include appropriate text such as titles, captions, axis labels

    -   experiment with colors and typefaces / fonts

    -   create a presentable / aesthetically-pleasing theme (e.g. (re)move gridlines / legends as appropriate, adjust font sizes, etc.)

## Data Wrangling

```{r setup}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                load packages                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


library("tidyverse") # for tidy everything! (data cleaning, wrangling)
library("here") # for reproducible file paths
library("janitor") # used to clean column names

library("glue") # for scientific labeling on plots 

library("naniar") # tools for exploring & handing missing data
library("ggridges") # {ggplot2} extension for creating ridgeline plots
library("ggbeeswarm") # {ggplot2} extension for creating categorical scatter (violin point) plots
library("scales") # provides the internal scaling infrastructure used by ggplot2, and gives you tools to override the default breaks, labels, transformations and palettes (installed automatically with {ggplot2} or {tidyverse})
library("calecopal") # used for custom plot theme
library("paletteer") # for custom palettes
library("ggtext") # used for customizing plot text
library("ggrepel") # to label lines in plot
library("viridis") # colorblind-friendly palette

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                import data                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

agrifood_emissions <- read_csv(here("data", "Agrofood_co2_emission.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          data cleaning & wrangling                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# the column names are not tidy, so I'll start out by renaming them to lower_snake_case()
ag_clean_names <- agrifood_emissions |> 
  janitor::clean_names() 

ag_clean <- ag_clean_names |> 
  # the column names are quite long, though informative, so I'll first select the columns/variables I'm most interested in...
  select(area, year, total_emission, average_temperature_c, urban_population, rural_population, rice_cultivation, crop_residues, pesticides_manufacturing, food_transport, on_farm_energy_use, manure_management, manure_left_on_pasture, manure_applied_to_soils, agrifood_systems_waste_disposal, forestland, food_household_consumption, food_retail, food_packaging, savanna_fires, forest_fires, net_forest_conversion, drained_organic_soils_co2, total_population_male, total_population_female) |> 
  
  # and then rename them to more easily referable titles 
  rename(country = area, 
         avg_temp_c = average_temperature_c,
         total_emissions = total_emission, # plurals are always so tricky to keep track of, but "emissions" feels more natural than "emission"
         urban_pop = urban_population,
         rural_pop = rural_population,
         pesticide_manuf = pesticides_manufacturing,
         agfood_waste_disposal = agrifood_systems_waste_disposal,
         f_hh_consumption = food_household_consumption,
         net_forest_conv = net_forest_conversion,
         food_pack = food_packaging)  |> 
  # adding a total population column
  mutate(total_pop = (total_population_male + total_population_female)) |> 
  # making a proportion column to theoretically compare/standardize emissions per capita
  mutate(emissions_per_capita = (total_emissions / total_pop))

# -------------- Renaming country names ------------------------------------
rename_function <- function(df, column, old_name, new_name) {
  # using the specified dataframe
  df |> 
    # mutate across the specified column
    mutate(across(column,
                  str_replace, # use the str_replace function
                  pattern = old_name, # find the string pattern old_name
                  replacement = new_name)) # replace with new_name
}


# renaming agri-food emissions countries ----

ag_renamed <- ag_clean |> 
  rename_function("country", "China, Hong Kong SAR", "Hong Kong") |> 
  rename_function("country", "China, Taiwan Province of", "Taiwan") |> 
  rename_function("country", "China, mainland", "China (mainland)") |> 
  rename_function("country", "United States of America", "USA") |> 
  rename_function("country", "Venezuela (Bolivarian Republic of)", "Venezuela") |> 
  rename_function("country", "Bolivia (Plurinational State of)", "Bolivia") |> # for some reason, this renaming line doesn't seem to work...
  rename_function("country", "United Kingdom of Great Britain and Northern Ireland", "United Kingdom") |> 
  rename_function("country", "Democratic Republic of the Congo", "DRC")


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          creating subsets                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ----------------- Subsets from HW2 plots -----------------------------------
top_emitters <- ag_renamed |> 
#  group_by(year, country) |> 
#  arrange(desc(total_emissions)) |> 
  filter(country %in% c("China (mainland)", "Indonesia", "Brazil", "USA", "India")) |> 
  mutate(label = if_else(year == max(year),
                         as.character(country), NA_character_)) # to label plot 
 


# top emitters per capita
top_per_cap <- ag_renamed |> 
  group_by(year, country) |> 
  arrange(desc(emissions_per_capita)) |> 
  filter(country %in% c("Belize", "Botswana", "Guyana", "Suriname", "Trinidad and Tobago"))

usa_food <- ag_renamed |> 
  filter(country %in% c("USA"))


emissions_2020 <- ag_renamed |> 
  filter(year %in% c("2020"))


top_emitters_2020 <- top_emitters |> 
  filter(year %in% c("2020"))


# United States of America Subset ----
usa <- ag_renamed |> 
  filter(country %in% c("USA"))

# China Subset ----

china <- ag_renamed |> 
  filter(country %in% c("China (mainland)"))

# US & China Subset ----

usa_china <- ag_renamed |> 
  filter(country %in% c("China (mainland)", "USA"))


# USA 2020 (for Sankey diagram)

usa_2020 <- usa |> 
  filter(year %in% c(2020))

# China 2020 (for Sankey diagram)

china_2020 <- china |> 
  filter(year %in% c(2020))


# USA & China in 1990, 2020

usa_china_90_20 <- usa_china |> 
  filter(year %in% c(1990, 2020))

# Average emissions across entire dataset

all_avg_emissions <- ag_clean |> 
  group_by(year) |> 
  summarize(avg_emissions = mean(total_emissions, na.rm = TRUE)) |> 
  mutate(country = "Global Average")


# percentage emissions function ----

pct_emissions <- function(df, value, total, new_column) {
  
  df |> 
    mutate(new_column = (value / total) * 100)
  
}

# usa_china_pct <- usa_china |> 
#   pct_emissions(value = )

```

## Plot 1

```{r plot-1}
# I'm struggling to get this to work 
title_lab_p1 <- glue::glue("Total agri-food CO<sub>2</sub> emissions")

usa_china_tot_emissions_plot <- ggplot() +
  # geom_point() +
  geom_line(data = usa_china,
            aes(x = year,
                y = total_emissions,
                color = country,
                linetype = country)) +
  geom_line(data = all_avg_emissions,
            aes(x = year,
                y = avg_emissions,
                color = country,
                linetype = country),
      #      linetype = "longdash",
            linewidth = 0.5) +
  # rescaling y-axis to be more legible (than 2e+06, for example)
  scale_y_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.000001, # millions
                                          suffix = "M")) +
  scale_color_manual(values = c("red", "darkcyan", "mediumblue")) +
#   scale_color_viridis_d() + 
  # updating labels, titles, theme
  labs(x = "Year", 
       y = "Agri-food CO2 emissions (kilotons)",
       title = "Total agri-food CO2 emissions ",
       subtitle = "in the USA and China (1990-2020)",
       caption = "1 kiloton (kt) = 1000 kg",
       color = "Country",
       linetype = "Country") +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        panel.grid.minor.y = element_blank(),
        plot.title.position = "plot",
        plot.title = element_text(hjust = 0.45,
                                  vjust = 1,
                                  family = "Futura",
                                  face = "bold",
                                  size = 16),
        plot.subtitle = element_text(family = "Futura",
                                     face = "plain", 
                                     size = 14,
                                     vjust = 1,
                                     hjust = 0.45),
        legend.box.margin =  margin(l = 0.5, unit = "cm"),
        legend.title = element_text(family = "Futura",
                                    face = "plain",
                                    size = 11),
   #     legend.title.align = 0.5,
        legend.text = element_text(family = "Futura",
                                   size = 10),
        # axis.text.x = element_text(angle = 45,
        #                            vjust = 0.75,
        #                            hjust = 0.9),
        axis.title.x = element_text(vjust = -0.5,
                                    family = "Futura"), 
        axis.text.x = element_text(family = "Futura"),
        axis.title.y = element_text(family = "Futura",
                                    vjust = 2),
        axis.text.y = element_text(family = "Futura"),
        plot.caption = element_text(family = "Futura"))

usa_china_tot_emissions_plot
```



## Plot 2

Sankey thoughts: 

GROUPS & SUBGROUPS: 

AGRICULTURE: 

subgroups:

Fires:
savanna_fires
forest_fires
fire_in_humid_tropical_forests
fires_in_organic_soils

Forests:
forestland (sink / -)
net_forest_conversion


Soils:
drained_organic_soils_co2

On-farm emissions:
rice_cultivation
crop_residues

on_farm_energy_use =
on_farm_electricity_use + ?

manure_management = 
manure_applied_to_soils + manure_left_on_pasture

Agrichemical:
pesticides_manufacturing
fertilizers_manufacturing

FOOD:

food_household_consumption
food_packaging
food_transport
food_retail
food_processing

- other:
agrifood_systems_waste_disposal
ippu


```{r sankey-example}

# Library
library(networkD3)
library(dplyr)
 
# A connection data frame is a list of flows with intensity for each flow
links <- data.frame(
  source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"), 
  target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"), 
  value=c(2,3, 2, 3, 1, 3)
  )
 
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
  name=c(as.character(links$source), 
  as.character(links$target)) %>% unique()
)
 
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1 
links$IDtarget <- match(links$target, nodes$name)-1
 
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
              Source = "IDsource", Target = "IDtarget",
              Value = "value", NodeID = "name", 
              sinksRight=FALSE)
p

# save the widget
# library(htmlwidgets)
# saveWidget(p, file=paste0( getwd(), "/HtmlWidget/sankeyBasic1.html"))

```

```{r plot-2}



```


## Plot 3

```{r plot-3}



```

-   Answer the following questions:

    -   What challenges did you encounter or anticipate encountering as you continue to build / iterate on your visualizations in R?

    -   What ggplot extension tools / packages do you need to use to build your visualizations? Are there any that we haven’t covered in class that you’ll be learning how to use for your visualizations?

    -   What feedback do you need from the instructional team and / or your peers to ensure that your intended message is clear?

library(networkD3) , sankeyNetwork package to make Sankey Diagram/Network
