---
author: "Anna Ramji (she/her)"
date: 2024-01-31
title: "Homework 2 Part 2"
format:
  html:
    embed-resources: true
---

For HW #3, you must complete the following:

**Which option do you plan to pursue?** 

- I plan to pursue option 2 (infographic with 3 subquestions)

**Restate your question(s). Has this changed at all since HW #1? If yes, how so?**

Overarching Q: How have agrifood CO2 emissions changed over time in China and the United States (bigger picture trend)

1.  How have total agrifood CO2 emissions changed over time in China vs. US

2.  How have agrifood CO2 emissions per capita changed over time in China vs. US

3.  What are the key contributors to US agrifood CO2 emissions (sankey diagram) in 2020 (vs 1990 ? would that count as an additional visualization?)

Yes, I have decided to drop the economic freedom quartile dataset due to time and assignment constraints. I think if I were able to make 10 visualizations or have another quarter to work with the data, it would be intersting to investigate the relationship between economic freedom quartile and prevalence of specific contributors to agrifood CO2 emissions, but I unfortunately don't have the luxury of time and lots of visualization space on my side. For this reason, I am also no longer planning on incorporating average temperature (ºC) in my visualization. Ideally, I'd be able to look at how changing Econ Freedom Q + change in temp over time impacts specific contributors of emissions (savannah fires, for example) particularly in countries that went from lower to higher quartiles, or look at the biggest contributors to agrifood CO2 emissions by Econ Quartile. This last part could still be interesting and somewhat feasible, but might complicate my visualizations, so it could become a spring break project.

**Explain which variables from your data set(s) you will use to answer your question(s).** After wrangling my agrifood CO2 emissions data and creating new columns and calculating mean values for certain variables, I will be able to use: - time (year) - country (selecting US and China (mainland) after renaming appropriately) - total population (male pop + female pop, used to look at emissions per capita)

## HW 2 visualizations to draw from

In HW #2, you should have created some exploratory data viz to better understand your data. You may already have some ideas of how you plan to formally visualize your data, but it’s incredibly helpful to look at visualizations by other creators for inspiration. Find at least two data visualizations that you could (potentially) borrow / adapt pieces from. Link to them or download and embed them into your .qmd file, and explain which elements you might borrow (e.g. the graphic form, legend design, layout, etc.).


https://www.data-to-viz.com/graph/sankey.html Sankey Diagram 









## Hand-drawn visualizations

Hand-draw your anticipated three visualizations (option 1) or infographic (option 2). Take a photo of your drawing and embed it in your rendered .qmd file – note that these are not exploratory visualizations, but rather your plan for your final visualizations that you will eventually polish and submit with HW #4.

```{r}
library("tidyverse") # for tidy everything! (data cleaning, wrangling)
library("here") # for reproducible file paths
library(knitr)

#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Three hand-drawn plots show three different types of data visualizations for data about agri-food CO2 emissions in the USA and China from 1990-2020. The first plot is comprised of two line plots, one showing total emissions and the other showing emissions per capita. They both show the USA and China from 1990-2020, differentiated by line type and color. The second plot is a dumbbell plot of top agri-food emissions sources in the USA and China, with emissions levels for each source shown in 1990 compared to 2020, differentiating years by color. The third plot shows a scatter plot with linear regression applied to facet-wrapped emissions categories in the Food Sector, with USA and China differentiated by color. Overall, trends show that China has extremely high total emissions, with lower emissions per capita than the USA."

knitr::include_graphics("figs/EDS240-drawn-plots-1-2.png")
knitr::include_graphics("figs/EDS240-drawn-plot3.png")


```



-   Mock up your visualizations using code. We understand that you will continue to iterate on these into HW #4 (particularly after receiving feedback), but by the end of HW #3, you should:

    -   have your data plotted (if you’re experimenting with an advanced graphic form(s) that were not explicitly covered in class, we understand that this may take some more time to build; you should have as much put together as possible)

    -   use appropriate strategies to highlight / focus attention on a clear message

    -   include appropriate text such as titles, captions, axis labels

    -   experiment with colors and typefaces / fonts

    -   create a presentable / aesthetically-pleasing theme (e.g. (re)move gridlines / legends as appropriate, adjust font sizes, etc.)

## Data Wrangling

```{r setup}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                load packages                             ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


library("tidyverse") # for tidy everything! (data cleaning, wrangling)
library("here") # for reproducible file paths
library("janitor") # used to clean column names

library("glue") # for scientific labeling on plots 

library("naniar") # tools for exploring & handing missing data
library("ggridges") # {ggplot2} extension for creating ridgeline plots
library("ggbeeswarm") # {ggplot2} extension for creating categorical scatter (violin point) plots
library("scales") # provides the internal scaling infrastructure used by ggplot2, and gives you tools to override the default breaks, labels, transformations and palettes (installed automatically with {ggplot2} or {tidyverse})
library("calecopal") # used for custom plot theme
library("paletteer") # for custom palettes
library("ggtext") # used for customizing plot text
library("ggrepel") # to label lines in plot
library("viridis") # colorblind-friendly palette

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                import data                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

agrifood_emissions <- read_csv(here("data", "Agrofood_co2_emission.csv"))

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          data cleaning & wrangling                       ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# the column names are not tidy, so I'll start out by renaming them to lower_snake_case()
ag_clean_names <- agrifood_emissions |> 
  janitor::clean_names() 

ag_clean <- ag_clean_names |> 
  # the column names are quite long, though informative, so I'll first select the columns/variables I'm most interested in...
  # select(area, year, total_emission, average_temperature_c, urban_population, rural_population, rice_cultivation, crop_residues, pesticides_manufacturing, food_transport, on_farm_energy_use, manure_management, manure_left_on_pasture, manure_applied_to_soils, agrifood_systems_waste_disposal, forestland, food_household_consumption, food_retail, food_packaging, savanna_fires, forest_fires, net_forest_conversion, drained_organic_soils_co2, total_population_male, total_population_female) |> 
  
  # and then rename them to more easily referable titles 
  rename(country = area, 
         avg_temp_c = average_temperature_c,
         total_emissions = total_emission, # plurals are always so tricky to keep track of, but "emissions" feels more natural than "emission"
         urban_pop = urban_population,
         rural_pop = rural_population,
#         pesticide_manuf = pesticides_manufacturing,
         agfood_waste_disposal = agrifood_systems_waste_disposal,
#         f_hh_consumption = food_household_consumption,
#         net_forest_conv = net_forest_conversion,
  #       food_pack = food_packaging
)  |> 
  # adding a total population column
  mutate(total_pop = (total_population_male + total_population_female)) |> 
  # making a proportion column to theoretically compare/standardize emissions per capita
  mutate(emissions_per_capita = (total_emissions / total_pop))

# -------------- Renaming country names ------------------------------------
rename_function <- function(df, column, old_name, new_name) {
  # using the specified dataframe
  df |> 
    # mutate across the specified column
    mutate(across(column,
                  str_replace, # use the str_replace function
                  pattern = old_name, # find the string pattern old_name
                  replacement = new_name)) # replace with new_name
}


# renaming agri-food emissions countries ----

ag_renamed <- ag_clean |> 
  rename_function("country", "China, Hong Kong SAR", "Hong Kong") |> 
  rename_function("country", "China, Taiwan Province of", "Taiwan") |> 
  rename_function("country", "China, mainland", "China (mainland)") |> 
  rename_function("country", "United States of America", "USA") |> 
  rename_function("country", "Venezuela (Bolivarian Republic of)", "Venezuela") |> 
  rename_function("country", "Bolivia (Plurinational State of)", "Bolivia") |> # for some reason, this renaming line doesn't seem to work...
  rename_function("country", "United Kingdom of Great Britain and Northern Ireland", "United Kingdom") |> 
  rename_function("country", "Democratic Republic of the Congo", "DRC")


##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          creating subsets                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ----------------- Subsets from HW2 plots -----------------------------------
top_emitters <- ag_renamed |> 
#  group_by(year, country) |> 
#  arrange(desc(total_emissions)) |> 
  filter(country %in% c("China (mainland)", "Indonesia", "Brazil", "USA", "India")) |> 
  mutate(label = if_else(year == max(year),
                         as.character(country), NA_character_)) # to label plot 
 


# top emitters per capita
top_per_cap <- ag_renamed |> 
  group_by(year, country) |> 
  arrange(desc(emissions_per_capita)) |> 
  filter(country %in% c("Belize", "Botswana", "Guyana", "Suriname", "Trinidad and Tobago"))

usa_food <- ag_renamed |> 
  filter(country %in% c("USA"))


emissions_2020 <- ag_renamed |> 
  filter(year %in% c("2020"))


top_emitters_2020 <- top_emitters |> 
  filter(year %in% c("2020"))


# United States of America Subset ----
usa <- ag_renamed |> 
  filter(country %in% c("USA"))

# China Subset ----

china <- ag_renamed |> 
  filter(country %in% c("China (mainland)"))

# US & China Subset ----

usa_china <- ag_renamed |> 
  filter(country %in% c("China (mainland)", "USA"))


# USA 2020 (for Sankey diagram)

usa_2020 <- usa |> 
  filter(year %in% c(2020))

# China 2020 (for Sankey diagram)

china_2020 <- china |> 
  filter(year %in% c(2020))


# USA & China in 1990, 2020

usa_china_90_20 <- usa_china |> 
  filter(year %in% c(1990, 2020))

# Average emissions across entire dataset

all_avg_emissions <- ag_clean |> 
  group_by(year) |> 
  summarize(avg_tot_emissions = mean(total_emissions,
                                     na.rm = TRUE),
            avg_per_cap_emissions = mean(emissions_per_capita,
                                         na.rm = TRUE)) |> 
  mutate(country = "Global Average")


# percentage emissions function ----

pct_emissions <- function(df, value, total, new_column) {
  
  df |> 
    mutate(new_column = (value / total) * 100)
  
}

# usa_china_pct <- usa_china |> 
#   pct_emissions(value = )

```

## Plot 1: Agri-food CO2 Emissions Comparison

```{r plot-1}
# I'm struggling to get this to work 
title_lab_p1 <- glue::glue("Total agri-food CO<sub>2</sub> emissions")

usa_china_tot_emissions_plot <- ggplot() +
  # geom_point() +
  geom_line(data = usa_china,
            aes(x = year,
                y = total_emissions,
                color = country,
                linetype = country)) +
  # removed global average line following advice I got in discussion
  # geom_line(data = all_avg_emissions,
  #           aes(x = year,
  #               y = avg_emissions,
  #               color = country,
  #               linetype = country),
  #      linetype = "longdash",
  #           linewidth = 0.5) +
  
  # rescaling y-axis to be more legible (than 2e+06, for example)
  scale_y_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.000001, # millions
                                          suffix = "M")) +
  scale_color_manual(values = c("red",
                                #   "darkcyan",
                                "mediumblue")) +
  
  # ---------- updating labels, fit for patchwork ------------
labs(
  x = "", # removed for patchwork
  y = "Agri-food CO2 emissions (kt)*",
  title = "Agri-food CO2 emissions in USA and China (1990-2020)",
  subtitle = "Total Emissions", # for patchwork
  #       caption = "*1 kiloton (kt) = 1000 kg",
  color = "Country",
  linetype = "Country") +
  
  theme_bw() +
  
  # ================== Theme ===================================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
  # legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "Futura", size = 10),
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  plot.title = element_text(hjust = 0.45,
                            vjust = 1,
                            family = "Futura",
                            face = "bold",
                            size = 18,
                            margin = margin(t = 1, r = 0.5, 
                                            b = 1.2, l = 0.5,
                                            unit = "lines")),
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "Futura",
                               face = "bold", 
                               size = 16,
                               vjust = 1,
                               hjust = 0.45,
                               margin = margin(t = 0.2, r = 0, 
                                               b = 1, l = 0,
                                               unit = "lines")),
  
  # --------------- legend ----------------------
  legend.title = element_text(family = "Futura",
                              face = "bold",
                              size = 11),
  #  legend.title.align = 0.5,
  legend.text = element_text(family = "Futura",
                             size = 11),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "Futura",
                              face = "bold",
                              size = 12),
  axis.text.x = element_text(
    hjust = 0.9,
    vjust = 0.9,
    family = "Futura"),
  
  # --------------- y-axis ----------------------
  axis.title.y = element_text(family = "Futura",
                              vjust = 2,
                              face = "bold",
                              size = 12,
                              # customize title margins 
                              margin = margin(t = 15, r = 1, 
                                              b = 0, l = 0.5,
                                              unit = "lines")),
  axis.text.y = element_text(family = "Futura"))

# ------------- caption -----------------------
# omitted for patchwork fit 
#   plot.caption.position = "plot",
#   plot.caption = element_text(family = "Futura",
#                               hjust = 0.9,
#                               size = 10,
#                               margin = margin(t = 3, b = 0.5,
#                                               l = 0, r = 0.2,
#                                               unit = "lines"))
# )


# usa_china_tot_emissions_plot


# ================ PER CAPITA PLOT =====================================
usa_china_per_cap_plot <- ggplot() +
  geom_line(data = usa_china,
            aes(x = year,
                y = emissions_per_capita,
                color = country,
                linetype = country)) +
  
  # removed because it skews the y-scale too much 
  # adding global average line
  #   geom_line(data = all_avg_emissions,
  #             aes(x = year,
  #                 y = avg_per_cap_emissions,
  #                 color = country,
  #                 linetype = country),
  # #            linetype = "longdash",
  #             linewidth = 0.5) +
  

scale_color_manual(values = c("red",
                              # "darkcyan",
                              "mediumblue")) +
  
  # ------ updating labels, fit for patchwork ----------
  labs(x = "Year", 
       y = "", # remove label for patchwork
       # customized for patchwork
       #       title = "Agri-food CO2 emissions Per Capita",
       #       subtitle = "in the USA and China (1990-2020)",
       subtitle = "Emissions Per Capita",
       caption = "*1 kiloton (kt) = 1000 kg \n \n Global Average Emissions Per Capita = 0.2 kt",
       color = "", # remove label for patchwork
       linetype = "" # remove label for patchwork
       ) +
  guides(legend = "none") +
  
  theme_bw() +
  
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
 # legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "Futura", size = 10),
  
  # ---------------- title ---------------------
 # omitted for patchwork
  # plot.title.position = "plot",
  # plot.title = element_text(hjust = 0.45,
  #                           vjust = 1,
  #                           family = "Futura",
  #                           face = "bold",
  #                           size = 18),
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "Futura",
                               face = "bold", 
                               size = 16,
                               vjust = 1,
                               hjust = 0.45),
  
  # --------------- legend ----------------------
  # removed for patchwork 
 legend.position = "none", 
#   legend.title = element_text(family = "Futura",
#                               face = "bold",
#                               size = 11),
# #  legend.title.align = 0.5,
#   legend.text = element_text(family = "Futura",
#                              size = 11),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "Futura",
                              face = "bold",
                              size = 12),
  axis.text.x = element_text(
                             hjust = 0.9,
                             vjust = 0.9,
                             family = "Futura"),
  
  # --------------- y-axis ----------------------
# removed for patchwork
  # axis.title.y = element_text(family = "Futura",
  #                             vjust = 2,
  #                             face = "bold",
  #                             size = 12,
  #                             # customize title margins 
  #                             margin = margin(t = 0, r = 1, 
  #                                           b = 0, l = 0.5,
  #                                           unit = "lines")),
  # axis.text.y = element_text(family = "Futura"),
  
  # ------------- caption -----------------------
  plot.caption.position = "plot",
  plot.caption = element_text(family = "Futura",
                              hjust = 1.3,
                              size = 10,
                              margin = margin(t = 3, b = 0.5,
                                              l = 0, r = 0.2,
                                              unit = "lines"))
)
# usa_china_per_cap_plot

usa_china_tot_emissions_plot / usa_china_per_cap_plot
```





## Plot 2: Dumbbell plot 
of emissions by source in US, China (faceted)

### Plot 2 prep

```{r plot-2-prep}
# making subsets of relevant columns, years, total population, emissions per capita

usa_china_subset <- usa_china_90_20 |> 
  # manually deselecting lower emissions columns
  select(-c(forestland, fires_in_organic_soils,
            fires_in_humid_tropical_forests,
            savanna_fires, forest_fires,
            drained_organic_soils_co2, 
            pesticides_manufacturing,
            manure_applied_to_soils,
            crop_residues
            )) |> 
  # pivot all columns other than this specified list 
  pivot_longer(cols = -c(country, year, rural_pop,
                         urban_pop, total_population_male,
                         total_population_female, total_pop,
                         avg_temp_c, emissions_per_capita,
                         total_emissions, ippu),
               names_to = "emission_source", # new column name for types
               values_to = "emissions_kt") |>  # new column name for values
  # relocate for easier quick-reading 
  relocate(c(emission_source, emissions_kt), .after = year) |> 
  # make 'year' a factor (I end up making it a date for plot 3)
  mutate(year = as.factor(year)) |> 
  group_by(country, year)

plot2_v1 <- ggplot(data = usa_china_subset,
       aes(x = fct_reorder(emission_source, emissions_kt),
           y = emissions_kt,
           fill = year)) +
  geom_col() +
  coord_flip() +
  facet_wrap(~country, ncol = 1) +
  theme_bw()

dumb_90 <- usa_china_subset |> 
  filter(year %in% c("1990")) |> 
  ungroup() |> 
  select(-year) |> 
  mutate(emissions_1990 = emissions_kt) |> 
  select(-emissions_kt)

dumb_20 <- usa_china_subset |> 
  filter(year %in% c("2020")) |> 
  ungroup() |> 
  select(-year) |> 
  mutate(emissions_2020 = emissions_kt) |> 
  select(-emissions_kt)


# dumbbell, not dumb!
# this didn't work... kept getting improperly joined/improperly pivoted columns, such that all rows where 1990 emissions ahd values, 2020 emissions had NA values
# dumb_data <- full_join(dumb_90, dumb_20
#                    #    , .name_repair = "check_unique"
#                        )

dumb_2 <- bind_cols(dumb_90, dumb_20) 

dumb_3 <- dumb_2 |> 
#  rename_all(.funs = funs(sub("\\...*", "", names(dumb2))))
#  rename_with(~str_replace(., "...*", ""))
  rename(emission_source = emission_source...2,
         country = country...1,
         total_pop = total_pop...10) |> 
  relocate(c(emissions_1990, emissions_2020), .after = emission_source)

# I tried another way of joining the data here, but ultimately couldn't get it to work and was hard-coding what pivot-wider is already supposed to do 

# create year subsets to plot
# usa_china_dumb <- usa_china_subset |> 
#   ungroup() |> 
#   group_by(emission_source) |> 
# #  group_by(country) |> 
#   pivot_wider(names_from = year, values_from = emissions_kt, names_prefix = "emissions_") |> 
#   relocate(c(emissions_1990, emissions_2020), .after = emission_source) 
# |> 
  # mutate(emissions_kt = case_when(
  #   # keep 1990 values if 2020 is NA
  #   is.na(emissions_2020) ~ emissions_1990,
  #   # else if 1990 values are na, keep 2020 values
  #   is.na(emissions_1990) ~ emissions_2020
  # )
  # ) |> 
  # relocate(emissions_kt, .after = emissions_2020)
#head(usa_china_dumb)
```

#### Plot 2: Dumbell Plot

```{r plot-2, fig.height=7, fig.width=8}


# cols <- c("1990" = "#1a4301", "2020" = "#538d22")
dumbbell_plot <- ggplot(data = dumb_3) +
  # drawing a line between the two emissions levels for each of these groups
  geom_segment(aes(x = emissions_1990, 
                   xend = emissions_2020,
                   y = fct_reorder(emission_source, emissions_2020),
                   yend = emission_source),
               size = 0.5, 
               alpha = 0.5) +
  geom_point(aes(x = emissions_1990,
                 y = emission_source),
             color = "#245501",
             size = 2,
             alpha = 0.9) +
  geom_point(aes(x = emissions_2020,
                 y = emission_source),
             color = c("#73a942"),
             size = 2,
             alpha = 0.9) +
  # rescaling x-axis to be more legible (than 2e+05, for example)
  scale_x_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.001, # thousands
                                          suffix = "k")) +
  facet_wrap(~country,
             nrow = 2, # stack these vertically
             scales = "free_y") + # release these from groupings that aren't a part of these facet groups
  theme_bw() +
  labs(
    title = "Agrifood CO2 Emissions Over Time in USA vs. China",
    subtitle = "Top Emissions Sources in <span style='color:#245501;'>**1990**</span> vs. <span style='color:#73a942;'>**2020**</span>",
    y = "",
    x = "Agrifood CO2 Emissions (kt*)",
    caption = "*1 kiloton (kt) = 1000 kg"
    #   color = "Year"
  ) +
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.y = element_blank(),
  
  # increasing spacing between plots
  panel.spacing.y = unit(0.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
  legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "Futura", size = 11),
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  plot.title = element_text(hjust = 0.5,
                            vjust = 1,
                            family = "Futura",
                            face = "bold",
                            size = 18,
                            margin = margin(t = 0.3, r = 0, 
                                            b = 0.2, l = 0,
                                            unit = "lines")),
  
  # --------------- subtitle -------------------
  
  # plot.subtitle = element_text(family = "Futura",
  #                              face = "italic", 
  #                              size = 15,
  #                              vjust = 1,
  #                              hjust = 0.45),
  
  plot.subtitle = ggtext::element_markdown(family = "Futura",
                                           face = "italic", 
                                           size = 15,
                                           vjust = 1,
                                           hjust = 0.5,
                                           margin = margin(t = 0.2, r = 0, 
                                                           b = 1.1, l = 0,
                                                           unit = "lines")),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "Futura",
                              face = "bold",
                              size = 12,
                              margin = margin(t = 0.7, r = 0, 
                                              b = 1, l = 0,
                                              unit = "lines")),
  axis.text.x = element_text(vjust = 0.9,
                             family = "Futura"),
  
  # --------------- y-axis ----------------------
  axis.title.y = element_text(family = "Futura",
                              #    vjust = 2,
                              face = "bold",
                              size = 12),
  axis.text.y = element_text(family = "Futura"),
  
  # ------------- caption -----------------------
  plot.caption = element_text(family = "Futura",
                              hjust = 1,
                              size = 10,
                              margin = margin(t = 2, b = 0.8,
                                              l = 0, r = 0.5,
                                              unit = "lines"))
  
)


dumbbell_plot

```


## Plot 3: Food emissions vs. Rural Pop time series

```{r plot-3-prep}
# bar plot of top 5 emissions categories for each country?

top_sources <- dumb_3 |> 
  ungroup() |> 
  group_by(country, emission_source) |> 
  arrange(desc(emissions_2020))

#top_sources
# Warning messages:
# 1: In get(name, envir = env) : internal error -3 in R_decompress1



# --------- Food emissions subset ---------------------------
usa_china_pivot <- usa_china |> 
  pivot_longer(cols = -c(country, year, rural_pop, urban_pop,
                         total_population_male, total_population_female,
                         total_pop, avg_temp_c, emissions_per_capita,
                         total_emissions),
               names_to = "emission_source",
               values_to = "emissions_kt") |> 
  relocate(c(emission_source, emissions_kt), .after = year) |> 
  mutate(year = as.factor(year))


food_emissions <- usa_china_pivot |> 
  filter(emission_source %in% c("food_household_consumption",
                                "food_packaging",
                                "food_processing",
                                "food_retail",
                                "food_transport")) |> 
  mutate(year = lubridate::ymd(year, truncated = 2L))

```


```{r plot-3, fig.width=8, fig.height=5.5}
# creating labels for faceted plots

source_labs <- c("Food Household Consumption",
                 "Food Packaging",
                 "Food Processing",
                 "Food Retail",
                 "Food Transport")

names(source_labs) <- c("food_household_consumption",
                 "food_packaging",
                 "food_processing",
                 "food_retail",
                 "food_transport")

cols <- c("China (mainland)" = "#fb3640", "USA" = "#0a2463")

# --------- Plotting food emissions trends over time ----------

food_plot <- ggplot(data = food_emissions,
                    aes(x = year,
                        y = emissions_kt)) +
  geom_point(aes(color = country),
             alpha = 0.9) +
  # rescaling y-axis to be more legible (than 2e+06, for example)
  scale_y_continuous(label = label_number(accuracy = 1, 
                                          scale = 0.001, # thousands
                                          suffix = "k")) +
  scale_color_manual(values = cols) +
  # adding trend line 
  geom_smooth(method = "lm",
              formula = y ~ x,
              aes(color = country),
              show.legend = FALSE,
              se = FALSE,
              alpha = 0.6) +
  
  # facet wrapping by source type
  facet_wrap(~emission_source,
             nrow = 2,
             labeller = labeller(emission_source = source_labs)) +
  
  # -------- setting labels ----------------------------------
labs(
  title = "Annual Food Sector CO2 Emissions Over Time",
  subtitle = "in China (mainland) vs. United States of America (USA)",
  color = "Country",
  x = "Year",
  y = "Emissions (CO2 kt*)",
  caption = "*1 kiloton (kt) = 1000 kg"
) +
  
  # setting base theme
  theme_bw() +
  
  # ================== Theme ===============================
theme(
  # removing most gridlines 
  panel.grid.minor.x = element_blank(),
  panel.grid.major.x = element_blank(),
  panel.grid.minor.y = element_blank(),
  # lighter line color to emphasize trend over time
  panel.grid.major.y = element_line(color = "whitesmoke"),
  
  # increasing spacing between plots
  panel.spacing.x = unit(1.5, "lines"),
  # removing background color of faceted plot labels
  strip.background = element_rect(fill = "transparent"),
  
  # adjusting legend position to sit within the plot 
  legend.position = c(0.8, 0.2),
  
  # adjusting text elements of different plot components
  strip.text = element_text(family = "Futura", size = 10),
  
  # ---------------- title ---------------------
  plot.title.position = "plot",
  plot.title = element_text(hjust = 0.45,
                            vjust = 1,
                            family = "Futura",
                            face = "bold",
                            size = 18),
  
  # --------------- subtitle -------------------
  
  plot.subtitle = element_text(family = "Futura",
                               face = "italic", 
                               size = 15,
                               vjust = 1,
                               hjust = 0.45),
  
  # --------------- legend ----------------------
  legend.title = element_text(family = "Futura",
                              face = "bold",
                              size = 11),
  legend.title.align = 0.5,
  legend.text = element_text(family = "Futura",
                             size = 11),
  
  # --------------- x-axis ---------------------
  axis.title.x = element_text(vjust = -1,
                              family = "Futura",
                              face = "bold",
                              size = 12),
  axis.text.x = element_text(angle = 40,
                             hjust = 0.9,
                             vjust = 0.9,
                             family = "Futura"),
  
  # --------------- y-axis ----------------------
  axis.title.y = element_text(family = "Futura",
                              vjust = 2,
                              face = "bold",
                              size = 12),
  axis.text.y = element_text(family = "Futura"),
  
  # ------------- caption -----------------------
  plot.caption = element_text(family = "Futura",
                              hjust = 0.9,
                              size = 10)
  
)

# view plot 

food_plot

```

This plot honestly surprised me, because I expected food transport emissions to go up significantly in both countries as more of the population moved into cities, meaning that more food had to travel farther to get to the higher urban densities of each country's populations. 




## Conclusion/Questions

-   Answer the following questions:

    -   What challenges did you encounter or anticipate encountering as you continue to build / iterate on your visualizations in R?
    
    I struggled a lot with my data. I repeatedly considered scrapping everything and switching to a new dataset, or trying to apply different machine learning models to this dataset and then making my visualizations about which models performed the best in terms of using different variables as predictors for total emissions in the future. I ended up sticking with the Agri-food CO2 emissions dataset, though I did also download ClimateTrace data and do some preliminary data wrangling and visualization with that data. 
    
    I also struggled with getting the subscript formatting to cooperate with the CO_2 (the 2 is supposed to be a subscript). I followed the example from class, but I couldn't get it to work, so hopefully I'll figure that out in the next few days.
    
    I struggled to get the layout and formatting/placement of the axes labels where I wanted them for my patchwork of the two emissions plots I made for plot 1. I will continue to tinker with the margins settings and do some more research to see if there's anything I can do to get the labels where I want them to be.
    
    I anticipate encountering many challenges as I stitch all of my plots together in one infographic.

    -   What ggplot extension tools / packages do you need to use to build your visualizations? Are there any that we haven’t covered in class that you’ll be learning how to use for your visualizations?
    
    I would appreciate seeing example code on how to get the ideal version of the dumbbell plot suggested at the end of lecture 4. I would also really appreciate getting some Sam Csik-approved example code for the advanced plot types that we went over in discussion, because the resources I've tried -- like Data to Viz -- have been outdated and I've struggled to get them to work following the tidyverse style guide and with the most updated versions of R and relevant packages. I think it would also be really useful to go over some examples of infographics in terms of breaking down the code, similar to what we did for the first homework, but an ideal, tidy, well-commented version that covers some basics like plot placement, formatting, etc. 

    -   What feedback do you need from the instructional team and / or your peers to ensure that your intended message is clear?
    
    I'm not sure what I want to do for the final layout, or if there is another plot type or some kind of thematic element I can include to improve the overall impact of my visualizations, so any feedback or suggestions around that would be greatly appreciated. I also would like to get feedback from my peers to see if they would change anything, or what the overall picture of my plots is conveying to them. 
    

Feedback from discussion (Feb 21st): 
- remove global average line
- consider labeling countries on plot (ggtext or something similar)


## Plot X: Sankey (not static, so scrapped)

Sankey thoughts: 

GROUPS & SUBGROUPS: 

AGRICULTURE: 

subgroups:

Fires:

`savanna_fires`,
`forest_fires`,
`fire_in_humid_tropical_forests`,
`fires_in_organic_soils`

Forests:

`forestland` (sink / -),
`net_forest_conversion`


Soils:

`drained_organic_soils_co2`

On-farm emissions:

`rice_cultivation`,
`crop_residues`

`on_farm_energy_use` =
`on_farm_electricity_use` + ?

`manure_management` = 
`manure_applied_to_soils` + `manure_left_on_pasture` ?

Agrichemical:

`pesticides_manufacturing`,
`fertilizers_manufacturing`

FOOD:

`food_household_consumption`,
`food_packaging`,
`food_transport`,
`food_retail`,
`food_processing`

- other:
`agrifood_systems_waste_disposal`
`ippu` (the explanation for this variable in the dataset page on Kaggle / metadata is extremely limited, which is frustrating because this is such a big source)

Notes: 

- ggpubr annotation_raster for having background images 

- library(networkD3) , sankeyNetwork package to make Sankey Diagram/Network


```{r sankey-prep}
# making groups

# usa_sankey <- data.frame(
#   source = 
# )

usa_2020_pivot <- usa_2020 |> 
  select(-c(country, year, avg_temp_c, urban_pop, rural_pop,
            total_population_female, total_population_male,
            total_pop, emissions_per_capita, forestland)) |> 
  mutate(other = (savanna_fires + forest_fires + net_forest_conversion +
                    fires_in_organic_soils + fires_in_humid_tropical_forests +
                    drained_organic_soils_co2 + agfood_waste_disposal +
                    ippu)) |> 
  mutate(food = (food_transport + food_retail + food_packaging +
                   food_processing + food_household_consumption)) |> 
  mutate(agriculture = pesticides_manufacturing + fertilizers_manufacturing +
           on_farm_energy_use + manure_management + crop_residues + 
           rice_cultivation) |> 
  pivot_longer(cols = everything(),
               names_to = "emission_source",
               values_to = "emissions_kt"
  ) |> 
  mutate(total_emissions = 1023694.432) |> 
  mutate(pct_emissions = ((emissions_kt / total_emissions) * 100))


sankey_subset_groups <- usa_2020_pivot |> 
  filter(emission_source %in% c("agriculture", "food", "other")) |> 
 # mutate(emission_source = as.factor(emission_source)) 
  arrange(emission_source)
#  ordered(emission_source, levels = c("agriculture", "food", "other", "total_emissions"))


```


```{r sankey-df}
# Library
library(networkD3)
library(dplyr)
 
# A connection data frame is a list of flows with intensity for each flow
sankey_df <- data.frame(
#  source = c("agriculture", "food", "other"),
  source = c(sankey_subset_groups$emission_source),
  target = c("total_emissions"),
  value = c(sankey_subset_groups$pct_emissions)
)

# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
  name=c(as.character(sankey_df$source), 
  as.character(sankey_df$target)) |>  unique()
)

# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
sankey_df$IDsource <- match(sankey_df$source, nodes$name)-1 
sankey_df$IDtarget <- match(sankey_df$target, nodes$name)-1
 
# Make the Network
p <- sankeyNetwork(Links = sankey_df, Nodes = nodes,
              Source = "IDsource", Target = "IDtarget",
              Value = "value", NodeID = "name", 
              sinksRight=FALSE)

p


```

Note: I'm not going to include this one in my final infographic, I just got excited about the idea of it and failed to realize that it was not in fact such a good idea.

